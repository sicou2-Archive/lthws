0 The Setup
Nothing to Review, Python is Running
Maybe look in to gettin Python to Run on Treebow

1 A Good First Program
print()
$ python programName.py

2 Comments and Pound Characters
# to comment or disable lines of code
Debug trick read lines of code backwards (bottom up)


3 Numbers and Math
+, -, /, * (Modulus), %, <, >, <=, >= 
Normal Order of Operations

4 Variables and Names
variable_names with _ (underscore)
variable assigned with = 
can do things after = like math
print("There are ", variable, " here sep by ','.") 
4 = integer
3.0 = floating point number

5 More Variables and Printing
String with ' or " quotes
print(f"strings {variable} without needing loony cat")
variable = adding + or - sub * things_together
variables starting with numbers is no go in Python
round() is an option when working with floating points
6 Strings and Text
Strings are text you want to display or export out of the program
f"strings" can also be done with .format() suntax
	ex: variable.format(thing_to change_in_{}_of_variable)
		Not super strong with this

7 More Printing
print(can + concatinate + strings + of + variables + together + to 
      + print)
print('thing print', end=' ') can change the behavior of print from \n
    at the end of the line to a ' ' or whatever you please, there is 
	also (?) a sep= command I think? Maybe?

8 Printing, Printing
This ex hits .format() pretty well
formatter = '{} {} {} {}'
print(formatter.format(1, 2, 3, 4)


9 Printing, Printing, Printing
\n as escape characters
print('string', and_variable)
'''
Tripple quotes
'''

10 What Was That?
\ to esacpe in string
" \" "
' \' '
List of most (all?) of Python escape characters. 

11 Asking Questions
Software: takes input, changes it, shows what changed
print('thing',end='\n') <- New line by default

12 Prompting People
input('<> Phrase or symbol string you want to precede the cursor')
variable = input('> ')
Getting help out of Python Help in Windows has been hard.
One example that works is "python -m pydoc input" where input is the 
    term we are looking to learn about.
Cannot assign to a variable within print()

13 Parameters, Unpacking, Variables
sys.argv allows the passing of variables from the command line
argv = Argument Variable
from sys import argv -> needs only argv for call to work
    or
import sys -> needs sys.argv for call to work
'python program.py variable_1.txt variable_2'
within program.py -> 'script_name, text_doc, username = argv'
the three variables are now three variables you can work with that came
    from outside the program. 
You import 'modules' (other files), they are called modules, though in 
    reality, they are just other files. In other languages, they are
	also called libraries. They contain variables, code, and functions, 
	that you can use without having to write it yourself. So we can be 
	lazy. You an also think about them as black boxes. You do not really
	need to know what is going on inside as long as they work. 
Be careful of ValueErrors, too many or not enough arguments
For optional arguments look for *args or **kwargs
Command Line Arguments are strings, though they can be changed; int()

14 Prompting and Passing
The input('prompt') can be assigned variable prompt of some kind and 
    change it as needed.


15 Reading Files
open(text_file_name.txt, or_variable_with_file_name
   this opens the file and returns a 'file object', there are optional
   modes for opening these files, read, write, etc. 
txt.read() 

######################stopped on read, not sure how to do these things 
###from with in the python command line

16 Reading and Writing Files


17 More Files


18 Names, Variables, Code, Functions


19 Functions and Variables


20 Functions and Files


21 Functions Can Return Something


22 What Do you Know So Far?


23 Strings, Bytes, and Character Encodings


24 More Practice


25 Even More Practice


26 Congratulations, Take a Test!


27 Memorizing Logic


28 Boolean Practice


29 What If


30 Else and If


31 Making Decisions


32 Loops and Lists


33 While Loops


34 Accessing Elements of Lists


35 Branches and Functions


36 Designing and Debugging


37 Symbol Review


38 Doing Things to Lists


39 Dictionaries, Oh Lovely Dictionaries


40 Modules, Classes, and Objects


41 Learning to Speak Object-Oriented
NEED TO GO THROUGH AND PRACTICE oop_test.py

42 Is-A, Has-A, Objects, and Classes
NEED TO GO THROUGH AN PRACTICE ex42.py exercise

43 Basic Object-Oriented Analysis and Designing










####STOP ON PAGE 180####